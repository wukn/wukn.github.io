---
layout:     post
title:      "[Python3] 集合"
subtitle:   ""
date:       2017-03-12 00:00:00
author:     "wukn"
header-img: ""
catalog: true
tags:
    - Python3

---

> Python3 集合。

### 集合（Set）

集合是一个无序不重复元素集。其中的元素为可哈希对象。常用于关系测试和消除序列中的重复元素. 以及一些数学运算，如intersection（交集）、union（并集）、difference（差集）和sysmmetric difference（对称差集）。

集合支持以下操作：`x in set`、`len(set)`和`for x in set`。由于集合内的元素是无序的，集合并不记录元素的位置和插入的顺序，因此，它不支持索引、切片等序列相关的操作。

集合有两种类型，set和frozenset。set是可变类型的，也就是说可以使用`add()`和`remove()`方法来改变它的内容。因为它是可变的，所以它没有hash值，并且不能用作字典的key或者作为另一个集合的元素。frozenset是不可变且可哈希的。它一旦创建后内容便不能被修改。它可以用作字典的key或者作为另一个集合的元素。

集合可以通过构造函数创建：`set(iterable)`和`frozenset(iterable)`。如果iterable省略，那么创建的就是空集合。

set（不包括frozenset）还可以通过大括号和逗号分隔的元素列表创建，例如：`{'tom', 'jerry'}`。

跟列表解析类似，还可以使用集合解析来创建：

```python
>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'r', 'd'}
```

注意： 若要创建一个空集必须使用set()，而不能用 {}；后者将创建一个空的字典。

### 通用集合操作

set和frozenset支持以下操作：

* `len(s)`：返回集合s的容量。
* `x in s`：测试元素x是否存在于集合s中。
* `x not in s`：测试元素x是否不存在于集合s中。
* `isdisjoint(other)`：如果集合中没有跟other相同的元素（与other不相交），则返回True。两个集合的交集为空则为不相交。
* `issubset(other)`和`set <= other`：测试集合是否为other的子集，即是否集合中所有的元素都在other中。
* `set < other`：测试集合是否为other的真子集，也就是`set <= other`且`set != other`。
* `issuperset(other)`和`set >= other`：测试other是否为集合的子集，即是否other中所有的元素都在集合中。
* `set > other`：测试other是否为集合的真子集，也就是`set >= other`且`set != other`。
* `union(other, ...)`和`set | other | ...`：将集合的并集放到一个新的集合中返回。
* `intersection(other, ...)`和`set & other & ...`：将集合的交集放到一个新的集合中返回。
* `difference(other, ...)`和`set - other - ...`：将在set中而不在其它集合中的元素放到一个新的集合中返回。
* `symmetric_difference(other)`和`set ^ other`：将set和other的对称差集放到一个新的集合中返回。（对称差集：所有在set或者other中但不是同时在两个集合中的元素）
* `copy()`：将s的浅拷贝作为一个新的集合返回。

注意，非操作符版的`union()`、`intersection()`、`difference()`、`symmetric_difference()`、`issubset()`和`issuperset()`可以接受任意迭代器（iterable）作为参数。相对的，操作符版的方法所需的参数必须为集合。

```python
>>> set('abc') & 'cbs'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for &: 'set' and 'str'
>>> set('abc').intersection('cbs')
{'b', 'c'}
```

set和frozenset都支持集合比较。如果每个集合中的所有元素都在另一个集合中（两个集合互为子集），那么这两个集合就是相等的。如果集合A是集合B的真子集，那么集合A小于集合B。如果集合A是集合B的真超集，那么集合A大于集合B。

set和frozenset比较是根据它们的元素进行比较的。
```python
>>> set('abc') == frozenset('abc')
True
>>> set('abc') in set([frozenset('abc')])
True
```

子集和相等性比较不能推算出子集的排序顺序。例如，两个不相交的集合既不相等也不是对方的子集，也就是说`a<b`、`a==b`和`a>b`都返回False。

set和frozenset混合的二进制操作返回的是第一个操作数的类型。例如，`frozenset('ab') | set('bc')`返回的是一个frozenset实例。

### 可变集合操作

set支持而frozenset不支持的操作如下：
* `update(other, ...)`和`set |= other | ...`：更新集合set，将所有其它集合的元素添加到其中。（将集合更新为与其他集合的并集）
* `intersection_update(other, ...)`和`set &= other & ...`：更新集合set，只保留它跟所有其他集合并集的元素。（将集合更新为与其他集合的交集）
* `difference_update(other, ...)`和`set -= other | ...`：更新集合set，移除在其他集合中的元素。（将集合更新为与其他集合的差集）
* `symmetric_difference_update(other)`和`set ^= other`：更新集合set，只保留存在于其中一个集合而不是同时存在于两个集合中的元素。（将集合更新为与其他集合的对称差集）
* `add(elem)`：向集合中添加一个元素elem。
* `remove(elem)`：从集合中移除元素elem。elem不存在于集合中时会引发KeyError异常。
* `discard(elem)`：如果集合中存在elem，那么从集合中移除它。
* `pop()`：从集合中移除并返回任意一个元素。如果集合为空会引发KeyError异常。
* `clear()`：移除集合中的所有元素。

非操作符版的`update()`、`intersection_update()`、`difference_update()`和`symmetric_difference_update()`方法可以接受任意迭代器（iterable）作为参数。

`__contains__()`、`remove()`和`discard()`方法的`elem`参数必须为集合。


---

参考资料：

[Python3 Documentation - Language Reference](https://docs.python.org/3.5/library/stdtypes.html#set-types-set-frozenset)
