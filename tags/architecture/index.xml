<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on wukn blog</title>
    <link>https://wukn.github.io/tags/architecture/</link>
    <description>Recent content in Architecture on wukn blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 07 May 2018 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://wukn.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[精耕]软件架构——业务、架构和技术三者的关系</title>
      <link>https://wukn.github.io/2018/05/07/architecutre-talks-business-architeture-technology/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://wukn.github.io/2018/05/07/architecutre-talks-business-architeture-technology/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在软件设计开发的过程中经常会看到，很多所谓的架构讨论实际上只是在讨论某些技术。有些人，特别是软件工程师，认为架构和技术实际上是等同的。多学会了几种技术，就觉得可以做架构师了。或者学会的技术越多，就觉得自己的架构水平越高。往往还看不上业务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[精耕]软件架构——软件的生命周期与软件架构</title>
      <link>https://wukn.github.io/2018/05/06/architecutre-talks-software-lifecycle-and-architecture/</link>
      <pubDate>Sun, 06 May 2018 10:24:00 +0800</pubDate>
      
      <guid>https://wukn.github.io/2018/05/06/architecutre-talks-software-lifecycle-and-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一个软件，因为i某个业务的需要而产生，后续不断地更新、修改，推动软件逐渐变异、长大。当软件不再被需要（因业务的变化），或有更好的软件来替代时，该软件就会被废弃，完成使命而消亡。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[精耕]认识架构——识别问题和切分的原则</title>
      <link>https://wukn.github.io/2018/04/30/architecutre-talks-identify-issue-and-split/</link>
      <pubDate>Mon, 30 Apr 2018 10:24:00 +0800</pubDate>
      
      <guid>https://wukn.github.io/2018/04/30/architecutre-talks-identify-issue-and-split/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;做好架构首先需要做的就是识别出需要解决的问题，也就是核心生命周期。一般来说，如果把真正的问题找到，把核心生命周期找到，问题就已经解决八成了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[精耕]认识架构——什么是架构</title>
      <link>https://wukn.github.io/2018/04/29/architecutre-talks-what-is-architecture/</link>
      <pubDate>Sun, 29 Apr 2018 08:30:00 +0800</pubDate>
      
      <guid>https://wukn.github.io/2018/04/29/architecutre-talks-what-is-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;正如我们的生命周期，除了那些别人无法替代必须要由自己来完成的核心生命周期活动（吃饭、睡觉等）外，把其他的生命周期活动并行起来，在同样多的时间内做更多的事情。如何做到这一点呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[精耕]认识架构——生命周期</title>
      <link>https://wukn.github.io/2018/04/28/architecutre-talks-lifecycle/</link>
      <pubDate>Sat, 28 Apr 2018 00:24:00 +0800</pubDate>
      
      <guid>https://wukn.github.io/2018/04/28/architecutre-talks-lifecycle/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;人类自古以来就在研究自身的生灭问题，也就是生死问题。西方称之为生命周期。这个问题隐藏在每个人的言行举止中，人们经常为之深深地恐惧。这种恐惧的心理驱使着人们做出种种的努力，来延缓甚至避免这个结果，虽然人们明知无法避免。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>恰如其分的软件架构</title>
      <link>https://wukn.github.io/2017/08/06/properly-architecture/</link>
      <pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2017/08/06/properly-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;恰如其分的软件架构&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译][软件架构模式]-基于空间的架构Space-based Architecture</title>
      <link>https://wukn.github.io/2016/10/21/space-based-architecture/</link>
      <pubDate>Fri, 21 Oct 2016 04:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2016/10/21/space-based-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;大部分Web应用的处理流程为：浏览器发起的请求精经过Web服务器、应用服务器和数据库服务器的处理。当用户量不大时这样的模式没有任何问题。但随着用户访问量的增加，系统开始出现性能瓶颈，首先是Web服务器层，其次是应用服务器层，最后是数据库服务器层。处理的措施通常是水平扩展Web服务器。这是比较容易实现的。但是用户量过大时，水平扩展Web服务层后，瓶颈会转移到应用服务层。应用服务层的水平扩展相对比较复杂一些了，也会导致瓶颈转移到数据库服务层。而数据库服务层扩展起来代价更高。&lt;/p&gt;

&lt;p&gt;对于有大量用户并发访问的应用，通常数据库的并发处理事务量是关键的限制因素。尽管有很多缓存技术和数据库扩展工具可以解决该问题，但事实上扩展出可承受极端负载的应用是很难的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译][软件架构模式]-微服务架构Microservices Architecture</title>
      <link>https://wukn.github.io/2016/10/21/microservices-architecture/</link>
      <pubDate>Fri, 21 Oct 2016 03:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2016/10/21/microservices-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;微服务架构是个正在快速发展的架构，可替代独立应用程序和面向服务架构（service-oriented architecture）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译][软件架构模式]-微内核架构Microkernel Architecture</title>
      <link>https://wukn.github.io/2016/10/21/microkernel-architecture/</link>
      <pubDate>Fri, 21 Oct 2016 02:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2016/10/21/microkernel-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;微内核架构有时也被成为插件架构模式（plug-in architecture pattern），通常用于实现基于产品的应用，如Eclipse和Firefox。然而许多公司也将内部的业务软件做成软件产品，提供版本、发版说明和插件特性。微内核架构模式通过插件向核心应用添加额外的功能，提供了可扩展性和功能的独立和分离。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译][软件架构模式]-事件驱动架构Event-Driven Architecture</title>
      <link>https://wukn.github.io/2016/10/21/event-driven-architecture/</link>
      <pubDate>Fri, 21 Oct 2016 01:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2016/10/21/event-driven-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;事件驱动架构是个流行的分布式异步架构模式，用于构建高伸缩性的应用。它有很高的适应性，既适用于小型应用，也适合大型复杂应用。事件驱动架构是由高度解耦的、目标单一、可异步接收和处理事件的组件组成。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译][软件架构模式]-分层架构Layered Architecture</title>
      <link>https://wukn.github.io/2016/10/21/layered-architecture/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wukn.github.io/2016/10/21/layered-architecture/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;分层架构模式是最常用的架构模式，也被成为N层架构模式。大部分架构师、设计者、开发者都熟知该模式。它与传统的IT通信和组织结构十分匹配，因此大部分业务应用开发自然而然选择它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>